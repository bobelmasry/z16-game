.equ TILE_MAP_BUFFER_ADDR, 0xF000
.equ TILE_DEFINITIONS_ADDR, 0xF200
.equ COLOR_PALLETE_ADDR, 0xFA00

.text
.org 0x0000
j main
.org 0x0020
main:
    li16 sp, STACK_TOP # Initialize stack pointer
    call init_reset_ball_direction
    title_screen_loop:
        li16 a0, 32 # Space key
        ecall 7 # Read character from keyboard
        bnz a1, draw_initial_game # If space is pressed, draw the initial game screen
        j title_screen_loop
    draw_initial_game:
        la a0, tiles_initial_game
        call update_screen
    game_loop:
        call read_keyboard
        call move_p1
        call move_p2
        call init_move_ball
        call paint_ball
        call check_win
        j game_loop

move_p1:
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)

    la t0, p1_dir
    li t1, 1
    lw s0, 0(t0)            # load p1_dir
    beq s0, t1, p1_move_up
    li t1, -1
    beq s0, t1, p1_should_move_down
    j p1_move_done
    p1_should_move_down:
        j p1_move_down
    p1_move_up:
        la t0, p1_pos
        lw a0, 0(t0)            # load p1_pos
        li s0, 0
        bz a0, p1_move_up_nothing # if p1_pos == 0, do nothing
        j after_p1_move_up_nothing
        p1_move_up_nothing:
        j p1_move_done
        after_p1_move_up_nothing:
            addi a0, -1             # p1_pos = p1_pos - 1
            sw a0, 0(t0)            # store new position in p1_pos
            call get_offset # Get the offset for the tile map
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 2
            sb a1, 0(t0)            # store 1 in tiles at the offset
            # Remove the old position of player 1 that is p1_pos + 4
            # Load the old position into a0
            la t0, p1_pos
            lw a0, 0(t0)            # load p1_pos
            addi a0, 3              # a0 = p1_pos + 3
            call get_offset # Get the offset for the tile map
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 0
            sb a1, 0(t0)            # store 0 in tiles at the old position

            j p1_move_done

    p1_move_down:
        la t0, p1_pos
        lw a0, 0(t0)            # load p1_pos
        li s0, 12
        beq a0, s0, p1_move_down_nothing # if p1_pos == 0, do nothing
        j after_p1_move_down_nothing
        p1_move_down_nothing:
        j p1_move_done
        after_p1_move_down_nothing:
            addi a0, 1             # p1_pos = p1_pos + 1
            sw a0, 0(t0)            # store new position in p1_pos

            # We will highlight with white the position that is p1_pos + 3
            addi a0, 2
            call get_offset # Get the offset for the tile map
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 2
            sb a1, 0(t0)            # store 1 in tiles at the offset

            # Remove the old position of player 1 that is p1_pos - 1
            # Load the old position into a0
            la t0, p1_pos
            lw a0, 0(t0)            # load p1_pos
            addi a0, -1              # a0 = p1_pos -1
            call get_offset # Get the offset for the tile map
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 0
            sb a1, 0(t0)            # store 0 in tiles at the old position

            j p1_move_done

    p1_move_done:
        # Restore the return address and s0
        lw ra, 0(sp)
        addi sp, 2
        ret
init_reset_ball_direction:
    j reset_ball_direction

move_p2:
    # Push the return address and s0
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)

    la t0, p2_dir
    li t1, 1
    lw s0, 0(t0)            # load t0 = p2_dir
    beq s0, t1, p2_move_up  # if p2_dir == 1, move up
    li t1, -1 
    beq s0, t1, p2_should_move_down # if p2_dir == -1, move down
    j p2_move_done
    p2_should_move_down:
        j p2_move_down
    p2_move_up:
        la t0, p2_pos
        lw a0, 0(t0)            # load a0 = p2_pos
        bz a0, p2_move_up_nothing # if p2_pos == 0, do nothing
        j after_p2_move_up_nothing
        p2_move_up_nothing:
        j p2_move_done
        after_p2_move_up_nothing:
            addi a0, -1             # p2_pos = p2_pos - 1
            sw a0, 0(t0)            # store new position in p1_pos
            call get_offset         # Get the offset for the tile map
            addi a0, 19             # The player 2 offset
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 3
            sb a1, 0(t0)            # store 1 in tiles at the offset
            # Remove the old position of player 1 that is p1_pos + 4
            # Load the old position into a0
            la t0, p2_pos
            lw a0, 0(t0)            # load p2_pos
            addi a0, 3              # a0 = p2_pos + 3
            call get_offset # Get the offset for the tile map
            addi a0, 19             # The player 2 offset
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 0
            sb a1, 0(t0)            # store 0 in tiles at the old position

            j p2_move_done

    p2_move_down:
        la t0, p2_pos
        lw a0, 0(t0)            # load p2_pos
        li s0, 12
        beq a0, s0, p2_move_down_nothing # if p2_pos == 0, do nothing
        j after_p2_move_down_nothing
        p2_move_down_nothing:
        j p2_move_done
        after_p2_move_down_nothing:
            addi a0, 1             # p2_pos = p2_pos + 1
            sw a0, 0(t0)            # store new position in p2_pos

            # We will highlight with white the position that is p2_pos + 2
            addi a0, 2
            call get_offset # Get the offset for the tile map
            addi a0, 19             # The player 2 offset
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 3
            sb a1, 0(t0)            # store 1 in tiles at the offset

            # Remove the old position of player 1 that is p2_pos - 1
            # Load the old position into a0
            la t0, p2_pos
            lw a0, 0(t0)            # load p2_pos
            addi a0, -1              # a0 = p2_pos -1
            call get_offset # Get the offset for the tile map
            addi a0, 19
            la t0, tiles
            add t0, a0              # t0 = &tiles[offset]
            li a1, 0
            sb a1, 0(t0)            # store 0 in tiles at the old position

            j p2_move_done

    p2_move_done:
        # Restore the return address and s0
        lw ra, 0(sp)
        addi sp, 2
        ret

read_keyboard:
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)

    ### Player 1 Movement ###
    li16 a0, 'w'
    la a1, p1_dir
    li t0, 1
    call check_character

    li16 a0, 's'
    la a1, p1_dir
    li t0, -1
    call check_character

    ### Player 2 Movement ###
    li16 a0, 'i'
    la a1, p2_dir
    li t0, 1
    call check_character

    li16 a0, 'k'
    la a1, p2_dir
    li t0, -1
    call check_character

    lw ra, 0(sp)        # restore ra
    addi sp, 2
    ret

check_character:
    # Check if the character is pressed and store it in the input variable
    # Input: a0 = character to check, a1 = input variable address, t0 = value to store if character is pressed
    mv s0, a1
    ecall 7 # Read character from keyboard
    bnz a1, character_pressed
    ret
    character_pressed:
        sw t0, 0(s0) # Store the value in the input variable
        ret
        
paint_ball:
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)
    #### Paint the new position of the ball ####
    la t0, ball_pos_y
    lbu a0, 0(t0)            # load ball_pos_y
    call get_offset          # Get the offset for the tile map
    la t0, ball_pos_x
    lbu t1, 0(t0)            # load ball_pos_x
    add a0, t1               # a0 = y_offset + ball_pos_x
    la t0, tiles
    add t0, a0               # t0 = &tiles[offset]
    li a1, 1
    sb a1, 0(t0)             # store 1 in tiles at the new position

    #### Remove the old position of the ball ####
    la t0, ball_old_pos_y
    lbu a0, 0(t0)            # load ball_old_pos_y
    call get_offset # Get the offset for the tile map
    la t0, ball_old_pos_x
    lbu t1, 0(t0)            # load ball_old_pos_x
    add a0, t1              # a0 = y_offset + ball_old_pos_x
    la t0, tiles
    add t0, a0              # t0 = &tiles[offset]
    li a1, 0
    sb a1, 0(t0)            # store 0 in tiles at the old position

    lw ra, 0(sp)        # restore ra
    addi sp, 2           # restore stack pointer
    ret

init_move_ball:
    j move_ball


update_screen:
    # Update the screen with input tiles
    # Input: a0 = address of the tiles
    li16 s0, 300 # Number of tiles in the tile map (15 rows * 20 columns)
    li t0, 0
    la t1, tiles             # destination pointer
    update_screen_loop:
        beq t0, s0, exit_update_screen_loop # if t0 == 300, exit loop
        lbu a1, 0(a0)
        sb a1, 0(t1)
        addi a0, 1
        addi t1, 1
        addi t0, 1
        j update_screen_loop
    exit_update_screen_loop:
        ret

check_win:
    la t0, p1_score
    lb a0, 0(t0)            # load p1_score
    la t0, p2_score
    lb a1, 0(t0)            # load p2_score
    li t1, 3
    beq a0, t1, p1_wins
    beq a1, t1, p2_wins
    ret

    p1_wins:
        la a0, tiles_p1_won
        call update_screen
        j someone_won
    p2_wins:
        la a0, tiles_p2_won
        call update_screen
        j someone_won
    someone_won:
        # Player Wins fanfare
        li16 a0, 400   # Start with a low tone
        li16 a1, 100
        ecall 4

        li16 a0, 600   # Mid tone
        li16 a1, 100
        ecall 4

        li16 a0, 800   # Higher tone
        li16 a1, 100
        ecall 4

        li16 a0, 1000  # Even higher
        li16 a1, 150
        ecall 4

        li16 a0, 1200  # Final high pitch for emphasis
        li16 a1, 250
        ecall 4

        ecall 10 # Exit the program



get_offset: 
    # Get the offset for the tile map based on player's y position
    # Input: a0 = player's y position
    # Output: a0 = offset in tile map
    # There is no multiplication instruction, so we use addition, also we only have access to t0, t1
    # Save the return address, s0, t0, and t1 on the stack

    addi sp, -6
    sw ra, 4(sp)        # save ra
    sw t1, 2(sp)         # save t1
    sw t0, 0(sp)         # save t0

    mv t0, a0          # Move player's y position to t0
    slli t0, 4
    mv t1, a0
    slli t1, 2
    add t0, t1
    mv a0, t0

    # Restore the return address, ra, t0, and t1 from the stack
    lw ra, 4(sp)        # restore ra
    lw t1, 2(sp)         # restore t1
    lw t0, 0(sp)         # restore t0
    addi sp, 6       # restore stack pointer

    ret

generate_ball_direction:
    li a0, 0
    li a1, 1
    ecall 11 # Generate a random number between 0 and 1
    bz a0, set_ball_direction_neg 
    ret
    set_ball_direction_neg:
        li a0, -1
        ret

reset_ball_direction:
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)

    la t0, ball_dir_y
    call generate_ball_direction
    sb a0, 0(t0)            # store new ball_dir_y
    la t0, ball_dir_x
    call generate_ball_direction
    sb a0, 0(t0)            # store new ball_dir_x 

    lw ra, 0(sp)        # restore ra
    addi sp, 2
    ret
    

init_check_win:
    j check_win

move_ball:
    addi sp, -2
    sw ra, 0(sp)        # save ra (x1)

    ###### Save the old position of the ball ########
    la t0, ball_pos_y
    lbu a1, 0(t0)            # load ball_pos_y
    la t0, ball_old_pos_y
    sb a1, 0(t0)            # store old ball_pos_y

    la t0, ball_pos_x
    lbu a1, 0(t0)            # load ball_pos_x
    la t0, ball_old_pos_x
    sb a1, 0(t0)            # store old ball_pos_x

    ######## Calculate the next position of the ball and stores them ########
    # New x position
    la t0, ball_dir_x
    lbu a1, 0(t0)            # load ball_dir_x
    la t0, ball_pos_x
    lbu a0, 0(t0)            # load ball_pos_x
    add a0, a1
    sb a0, 0(t0)            # store new ball_pos_x    

    # New y position
    la t0, ball_dir_y
    lbu a1, 0(t0)            # load ball_dir_x
    la t0, ball_pos_y
    lbu a0, 0(t0)            # load ball_pos_x
    add a0, a1
    sb a0, 0(t0)            # store new ball_pos_x    

        
    # change x direction if the ball hits the left or right wall
    check_collision_with_left_right:
        la t0, ball_pos_x
        lbu a0, 0(t0)            # load ball_pos_x
        li t1, 19
        bz a0, check_collision_with_p1
        beq a0, t1, should_check_collision_with_p2  # if ball_pos_x == 19, negate the direction
        j check_collision_with_top_bottom
        should_check_collision_with_p2:
            j check_collision_with_p2

        check_collision_with_p1:
            la t0, ball_old_pos_y
            lbu t1, 0(t0)            # load ball_pos_y
            la t0, p1_pos
            lw a0, 0(t0)            # load p1_pos
            addi a0, -1
            bge t1, a0, check_collision_with_p1_continued     # if ball_pos_y >= p1_pos, check if it is within the paddle range
            call paint_ball
            li a0, 1            # p2 scored
            call score_player
            j check_collision_with_top_bottom
            check_collision_with_p1_continued:
                addi a0, 5           # a0 = p1_pos + 3
                blt t1, a0, negate_x_dir_p1  # if ball_pos_y < p1_pos + 3, negate the direction
                call paint_ball
                li a0, 1            # p2 scored
                call score_player
                j check_collision_with_top_bottom
                negate_x_dir_p1:
                    li16 a0, 500
                    li16 a1, 100
                    ecall 4
                    li16 a0, 400
                    li16 a1, 100
                    ecall 4
                    li16 a0, 700
                    li16 a1, 100
                    ecall 4
                    la t0, ball_pos_x
                    lbu t1, 0(t0)           # Load ball_pos_x
                    addi t1, 2              # Add 2 to ball_pos_x, to move the ball to the right
                    sb t1, 0(t0)            # Store new ball_pos_x
                    la t0, ball_dir_x
                    lbu t1, 0(t0)           # Load ball_dir_x
                    neg t1                  # Negate the ball_dir_x
                    sb t1, 0(t0)            # Store negated ball_dir_x
                    j check_collision_with_top_bottom
    
        check_collision_with_p2:
            la t0, ball_old_pos_y
            lbu t1, 0(t0)            # load ball_pos_y
            la t0, p2_pos
            lw a0, 0(t0)            # load p1_pos
            addi a0, -1
            bge t1, a0, check_collision_with_p2_continued     # if ball_pos_y >= p1_pos, check if it is within the paddle range
            call paint_ball
            li a0, 0            # p1 scored
            call score_player
            j check_collision_with_top_bottom
            check_collision_with_p2_continued:
                addi a0, 5           # a0 = p2_pos + 4
                blt t1, a0, negate_x_dir_p2     # if ball_pos_y < p2_pos + 3, negate the direction
                call paint_ball
                li a0, 0            # p1 scored
                call score_player
                j check_collision_with_top_bottom
                negate_x_dir_p2:
                    li16 a0, 500
                    li16 a1, 100
                    ecall 4
                    li16 a0, 400
                    li16 a1, 100
                    ecall 4
                    li16 a0, 700
                    li16 a1, 100
                    ecall 4
                    la t0, ball_pos_x
                    lbu t1, 0(t0)           # Load ball_pos_x
                    addi t1, -2             # Subtract 2 to ball_pos_x, to move the ball to the left
                    sb t1, 0(t0)            # Store new ball_pos_x
                    la t0, ball_dir_x
                    lbu t1, 0(t0)           # Load ball_dir_x
                    neg t1                  # Negate the ball_dir_x
                    sb t1, 0(t0)            # Store negated ball_dir_x
        
        # change y direction if the ball hits the top or bottom wall
        check_collision_with_top_bottom:
            la t0, ball_pos_y
            li t1, 14
            lbu a0, 0(t0)            # load ball_pos_y
            bz a0, negate_y_dir
            beq a0, t1, negate_y_dir # if ball_pos_y == 14, negate the direction
            j move_ball_done

            negate_y_dir:
                la t0, ball_dir_y
                lb t1, 0(t0)            # load ball_dir_y  
                neg t1
                sb t1, 0(t0)            # store negated ball_dir_y
    
    move_ball_done:
            lw ra, 0(sp)        # restore ra
            addi sp, 2
            ret

init_update_screen:
    j update_screen

score_player:
    # This function is used to update the score of the player, and display the score on the screen
    # Input: a0 = player number (0 or 1)
    # Output: None, but updates the score on the screen and waits for a space to continue
    addi sp, -2
    sw ra, 0(sp)
    # Move current ball position to old position

    bz a0, p1_scored
    li t0, 1    # t0 = 1, means player 2 scored
    beq a0, t0, should_p2_scored

    j score_player_done

    should_p2_scored:
        j p2_scored
    p1_scored:
        la t0, p1_score
        lb s0, 0(t0)            # load p1_score
        addi s0, 1              # p1_score++
        
        sb s0, 0(t0)            # store new p1_score
        j draw_score_screen
    p2_scored:
        la t0, p2_score
        lb s0, 0(t0)            # load p2_score
        addi s0, 1              # p2_score++
        sb s0, 0(t0)            # store new p2_score
    
    draw_score_screen:
        # Quick victory fanfare with li16
        li16 a0, 500
        li16 a1, 50
        ecall 4

        li16 a0, 700
        li16 a1, 50
        ecall 4

        li16 a0, 900
        li16 a1, 50
        ecall 4

        li16 a0, 1100
        li16 a1, 200
        ecall 4

        # Clear Screen
        la a0, tiles_clear
        call init_update_screen

        la t1, p1_score
        lb t0, 0(t1)            # t0 = load p1_score

        # Draw Player 1 Score
        mv a0, t0 # a0 = p1_score
        li a1, 0  # a1 = player number (0 for p1, 1 for p2)
        call draw_digit

        la t1, p2_score
        lb t0, 0(t1)            # t0 = load p2_score

        # Draw Player 2 Score
        mv a0, t0 # a0 = p2_score
        li a1, 1 # a1 = player number (0 for p1, 1 for p2)
        call draw_digit

        
    draw_score_screen_done:
    li16 t0, 1000
    score_player_sleep_loop:
        bz t0, score_player_sleep_loop_done
        addi t0, -1
        j score_player_sleep_loop
    score_player_sleep_loop_done:

    call init_check_win

    # reset the ball position
    la t0, ball_pos_y
    li t1, 7    
    sb t1, 0(t0)            # store new ball_pos_y
    la t0, ball_pos_x
    li t1, 9
    sb t1, 0(t0)            # store new ball_pos_x

    # Reset previous ball position
    la t0, ball_old_pos_y
    li t1, 7
    sb t1, 0(t0)            # store new ball_old_pos_y
    la t0, ball_old_pos_x
    li t1, 9
    sb t1, 0(t0)            # store new ball_old_pos_x


    # reset the ball direction
    call reset_ball_direction

    # Reset the player positions
    la t0, p1_pos
    li t1, 6
    sw t1, 0(t0)            # store new p1_pos
    la t0, p2_pos
    sw t1, 0(t0)            # store new p2_pos

    # Reset the player directions
    la t0, p1_dir
    li t1, 0
    sw t1, 0(t0)            # store new p1_dir
    la t0, p2_dir
    sw t1, 0(t0)            # store new p2_dir

    # Draw initial game screen
    la a0, tiles_initial_game
    call init_update_screen

    score_player_done:
    lw ra, 0(sp)
    addi sp, 2
    ret

draw_digit:
    # Draws a digit on the screen
    # Input: a0 = digit (0-3), a1 = player number (0 or 1)
    addi sp, -2
    sw ra, 0(sp)        # save ra

    li s0, 0
    beq a0, s0, should_draw_digit_0
    j after_should_draw_digit_0
    should_draw_digit_0:
        j draw_digit_0
    after_should_draw_digit_0:
    li s0, 1
    beq a0, s0, should_draw_digit_1
    j after_should_draw_digit_1
    should_draw_digit_1:
        j draw_digit_1
    after_should_draw_digit_1:
    li s0, 2
    beq a0, s0, should_draw_digit_2
    j after_should_draw_digit_2
    should_draw_digit_2:
        j draw_digit_2
    after_should_draw_digit_2:
    li s0, 3
    beq a0, s0, should_draw_digit_3
    j after_should_draw_digit_3
    should_draw_digit_3:
        j draw_digit_3
    after_should_draw_digit_3:
    j draw_digit_done
    
    draw_digit_0:
        li s0, 0
        beq a1, s0, draw_digit_0_p1
        draw_digit_0_p2:
            la t1, tiles_score_0_p2
            j draw_digit_screen
        draw_digit_0_p1:
            la t1, tiles_score_0_p1
            j draw_digit_screen
    draw_digit_1:
        li s0, 0
        beq a1, s0, draw_digit_1_p1
        draw_digit_1_p2:
            la t1, tiles_score_1_p2
            j draw_digit_screen
        draw_digit_1_p1:
            la t1, tiles_score_1_p1
            j draw_digit_screen

    draw_digit_2:
        li s0, 0
        beq a1, s0, draw_digit_2_p1
        draw_digit_2_p2:
            la t1, tiles_score_2_p2
            j draw_digit_screen
        draw_digit_2_p1:
            la t1, tiles_score_2_p1
            j draw_digit_screen

    draw_digit_3:
        li s0, 0
        beq a1, s0, draw_digit_3_p1
        draw_digit_3_p2:
            la t1, tiles_score_3_p2
            j draw_digit_screen
        draw_digit_3_p1:
            la t1, tiles_score_3_p1
            j draw_digit_screen

    draw_digit_screen:
        mv a0, t1 # a0 = address of the tiles to draw
        li16 s0, 300 # Number of tiles in the tile map (15 rows * 20 columns)
        li t0, 0
        la t1, tiles             # destination pointer
        draw_digit_loop:
            beq t0, s0, should_draw_digit_done # if t0 == 300, exit loop
            j after_should_draw_digit_done
            should_draw_digit_done:
                j draw_digit_done
            after_should_draw_digit_done:
            lbu a1, 0(a0)
            bz a1, draw_digit_skip_byte
            sb a1, 0(t1)
            draw_digit_skip_byte:
            addi a0, 1
            addi t1, 1
            addi t0, 1
            j draw_digit_loop
    draw_digit_done:
        lw ra, 0(sp)        # restore ra
        addi sp, 2          # restore stack pointer
        ret

.data
counter:
    .word 0 # Counter for the game, used to slow down the game speed (min = 0, max = 65535)
max_counter:
    .word 100 # Maximum value for the counter, used to slow down the game speed (min = 0, max = 65535)
p1_dir:
    .word 0     # 1 for up, -1 for down
p1_pos:
    .word 6 # Default position of player 1 (min = 0, max = 14)
p1_score:
    .byte 0 # Default score of player 1 (min = 0, max = 255)    
p2_score:
    .byte 0 # Default score of player 2 (min = 0, max = 255)
p2_pos:
    .word 6 # Default position of player 2 (min = 0, max = 14)
p2_dir:
    .word 0         # 1 for up, -1 for down
ball_pos_y:
    .byte 7     # Default position of the ball (min = 0, max = 14)
ball_pos_x:
    .byte 9 # Default position of the ball (min = 0, max = 19)
ball_old_pos_y:
    .byte 7 # Old position of the ball (min = 0, max = 14)
ball_old_pos_x:
    .byte 9 # Old position of the ball (min = 0, max = 19)
ball_dir_y:
    .byte 1 # 1 for down, -1 for up
ball_dir_x: 
    .byte 1 # 1 for right, -1 for left
tone_counter:
    .word 0 # Counter for the tone, to throttle the sound effects (min = 0, max = 65535)
tone_index:
    .word 0 # Index for the tone, used to play sound effects
tones:
    .word 400 # Frequency for the tone (min = 0, max = 65535)
    .word 500 # Frequency for the tone (min = 0, max = 65535)
    .word 600 # Frequency for the tone (min = 0, max = 65535)
    .word 500 # Frequency for the tone (min = 0, max = 65535)
    .word 400 # Frequency for the tone (min = 0, max = 65535)
    .word 700 # Frequency for the tone (min = 0, max = 65535)

tiles_p1_won:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0
    .byte 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0
    .byte 0, 0, 5, 0, 5, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0
    .byte 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_p2_won:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 0, 6, 0, 0
    .byte 0, 0, 6, 0, 0, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0
    .byte 0, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0
    .byte 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_clear:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_initial_game:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
    .byte 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
    .byte 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_0_p1:
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_0_p2:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 6, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_1_p1:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_1_p2:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_2_p1:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_2_p2:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
tiles_score_3_p1:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
tiles_score_3_p2:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0



.org 0xF000
tiles:
    .byte 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1
    .byte 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
    .byte 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1
    .byte 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1
    .byte 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1
    .byte 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0
    .byte 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1
    .byte 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0
    .byte 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
.org 0xF200
tile0_data:    
    .fill 128,1,0x00 
# Ball tiles
tile1_data:        
    .byte 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00
    .byte 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00
    .byte 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00
    .byte 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
    .byte 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
    .byte 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
    .byte 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
    .byte 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00
    .byte 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00
    .byte 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00
    .byte 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00
    .byte 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x00

# Player 1 tiles
tile2_data:    
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11
    .byte 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11

# Player 2 tiles
tile3_data:    
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00
    .byte 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00

tile4_data:    
    .fill 128,1,0x33 
tile5_data:    
    .byte 0x00, 0x00, 0x00, 0x44, 0x44, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00
    .byte 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00
    .byte 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00
    .byte 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00
    .byte 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00
    .byte 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00
    .byte 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00
    .byte 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x44, 0x44, 0x00, 0x00, 0x00
tile6_data:    
    .byte 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00
    .byte 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00
    .byte 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00
    .byte 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00
    .byte 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
    .byte 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
    .byte 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
    .byte 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
    .byte 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55
    .byte 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00
    .byte 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00
    .byte 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00
    .byte 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00
    .byte 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00
tile7_data:    
    .fill 128,1,0x66
tile8_data:    
    .byte 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33
    .byte 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33
    .byte 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33
    .byte 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33  
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

tile9_data:    
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
    .byte 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44  
tile10_data:   
    .fill 128,1,0x33   
tile11_data:   
    .fill 128,1,0x44   
tile12_data:   
    .fill 128,1,0xCC   
tile13_data:   
    .fill 128,1,0xDD   
tile14_data:   
    .fill 128,1,0xEE   
tile15_data:   
    .fill 128,1,0xFF   

.org 0xFA00
palette_data:
    .byte 0x00,  0xDA,  0xDA,  0xE9,  0x67,  0x92,  0x91,  0x6D
    .byte 0x6D,  0x49,  0x49,  0x24,  0x24,  0x00,  0x00,  0xFF